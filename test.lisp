(load "avl")
;;; avl-tree summary report
(defun report (bst)
  (format t "~&~S" bst)
  (format t "~&pre-order")
  (pre-order #'display-node bst)
  (format t "~&in-order")
  (in-order #'display-node bst)
  (format t "~&post-order")
  (post-order #'display-node bst)
  (format t "~&in-order predecessor node successor")
  (in-order
   #'(lambda (x) (format t "~&~S ~S ~S"
			 (key-and-value (predecessor-node (key x) bst))
			 (key-and-value x)
			 (key-and-value (successor-node (key x) bst))))
   bst)
  (format t "~&min key = ~S" (min-key bst))
  (format t "~&max key = ~S" (max-key bst))
  (format t "~&nodes = ~d" (count-nodes bst))
  (format t "~&leaves = ~d" (count-leaves bst))
  (format t "~&height = ~d" (height bst))
  (format t "~&(equalp (deserialize (serialize bst) bst): ")
  (format t "~S" (equalp (deserialize (serialize bst)) bst)))

;;; tests on smallest data set
(defvar *colors*)
(setf *colors* (text-file->bst "colors.txt"))
(report *colors*)
(setf *colors* (remove-node 'green *colors*))
(format t "~&deleted GREEN (interior node)")
(format t "~&~S" *colors*)
(setf *colors* (remove-node 'red *colors*))
(format t "~&deleted RED (leaf node)")
(format t "~&~S" *colors*)
(setf *colors* (remove-node 'orange *colors*))
(format t "~&deleted ORANGE (root node)")
(format t "~&~S" *colors*)
(format t "~&defoliating avl-tree *colors*")
(setf *colors* (defoliate *colors*))
(report *colors*)

;;; tests on medium data set
;; (defvar *states*)
;; (setf *states* (text-file->bst "states.txt"))
;; (report *states*)

;;; tests on largest data set
;; (defvar *countries*)
;; (setf *countries* (text-file->bst "countries.txt"))
;; (report *countries*)
;; (setf *countries* (remove-node '|UNITED KINGDOM; ENGLAND| *countries*))
;; (setf *countries* (remove-node '|UNITED KINGDOM NORTHERN IRELAND| *countries*))
;; (report *countries*)
;; (setf *countries* (insert-node '|UNITED KINGDOM| 'LONDON *countries*))
;; (setf *countries* (insert-node 'ENGLAND 'LONDON *countries*))
;; (report *countries*)
;; (format t "~&defoliating avl-tree *countries*")
;; (setf *countries* (defoliate *countries*))
;; (report *countries*)
